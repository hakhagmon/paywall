version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: symfony_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: symfony_db
      MYSQL_USER: symfony
      MYSQL_PASSWORD: symfony_password
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql  # опционально

  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: symfony_php
    restart: unless-stopped
    volumes:
      - .:/var/www:rw,cached
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini  # опционально
    environment:
      - DATABASE_URL=mysql://symfony:symfony_password@db:3306/symfony_db
    depends_on:
      - db

  nginx:
    image: nginx:alpine
    container_name: symfony_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - .:/var/www:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  db_data:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
